#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;

    Node(int val) {
        data = val;
        next = nullptr;
    }
};

// Function to delete a node at a given position (1-based indexing)
Node* deleteAtPosition(Node* head, int pos) {
    if (head == nullptr) {
        cout << "List is empty!" << endl;
        return nullptr;
    }

    // If deleting the head node
    if (pos == 1) {
        Node* temp = head;
        head = head->next;
        delete temp;
        return head;
    }

    Node* prev = head;
    int count = 1;

    // Traverse to the node before the position
    while (prev != nullptr && count < pos - 1) {
        prev = prev->next;
        count++;
    }

    // If position is out of range
    if (prev == nullptr || prev->next == nullptr) {
        cout << "Position out of range!" << endl;
        return head;
    }

    // Delete the node
    Node* temp = prev->next;
    prev->next = temp->next;
    delete temp;

    return head;
}

// Function to print the list
void printList(Node* head) {
    while (head != nullptr) {
        cout << head->data << " ";
        head = head->next;
    }
    cout << endl;
}

int main() {
    Node* head = nullptr;

    // Creating a list: 10 -> 20 -> 30 -> 40 -> 50
    head = new Node(10);
    head->next = new Node(20);
    head->next->next = new Node(30);
    head->next->next->next = new Node(40);
    head->next->next->next->next = new Node(50);

    cout << "Original List: ";
    printList(head);

    // Delete node at position 1 (head)
    head = deleteAtPosition(head, 1);
    cout << "After deleting position 1: ";
    printList(head);

    // Delete node at position 3
    head = deleteAtPosition(head, 3);
    cout << "After deleting position 3: ";
    printList(head);

    // Delete node at position 10 (invalid)
    head = deleteAtPosition(head, 10);
    cout << "After trying to delete position 10: ";
    printList(head);

    return 0;
}
