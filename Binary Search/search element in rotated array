// class Solution {
// public:
//     int search(vector<int>& nums, int k) {
//         int n=nums.size();
//         int low=0;
//         int high=n-1;
//         while(low<=high){
//             int mid=(low+high)/2;
//             if(nums[mid]==k){
//                 return nums[mid];
//             }

//             if(nums[low]<=nums[mid]){
//                 if(nums[low]<=k && nums[mid]>k){
//                     high=mid-1;

//                 }
//                 low=mid+1;
//             }
//             else{
//                 if(nums[mid]<k && nums[high]>=k){
//                     low=mid+1;
//                 }
//                 high=mid-1;
//             }
//         }
//         return -1;

        
//     }
// };

class Solution {
public:
    int search(vector<int>& nums, int k) {
        int n = nums.size();
        int low = 0;
        int high = n - 1;
        
        while (low <= high) {
            int mid = (low + high) / 2;

            // Check if the mid element is the target
            if (nums[mid] == k) {
                return mid;
            }

            // Determine which part of the array is sorted
            if (nums[low] <= nums[mid]) {
                // If k is in the left half (sorted part)
                if (nums[low] <= k && nums[mid] > k) {
                    high = mid - 1;
                }
                // Otherwise, search in the right half
                else {
                    low = mid + 1;
                }
            } 
            else {
                // If k is in the right half (sorted part)
                if (nums[mid] < k && nums[high] >= k) {
                    low = mid + 1;
                }
                // Otherwise, search in the left half
                else {
                    high = mid - 1;
                }
            }
        }
        return -1;  // If the element was not found
    }
};
